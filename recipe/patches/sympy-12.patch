Upgrade to sympy 1.2

see https://trac.sagemath.org/ticket/26117 for the upstream issue
diff --git a/build/pkgs/sympy/checksums.ini b/build/pkgs/sympy/checksums.ini
index 17c6faf..c052050 100644
--- a/build/pkgs/sympy/checksums.ini
+++ b/build/pkgs/sympy/checksums.ini
@@ -1,4 +1,4 @@
 tarball=sympy-VERSION.tar.gz
-sha1=d5acc09a7429de76713898728f1ec50a3c48e133
-md5=c410a9c2346878716d16ec873d72e72a
-cksum=3457785807
+sha1=7f149e0fab7dc0572fa2396c055decceaf384e03
+md5=11b24840f5740bb03feddb7d60c18a67
+cksum=1213046999
diff --git a/build/pkgs/sympy/package-version.txt b/build/pkgs/sympy/package-version.txt
index 7316ed6..d5b3ae3 100644
--- a/build/pkgs/sympy/package-version.txt
+++ b/build/pkgs/sympy/package-version.txt
@@ -1 +1 @@
-1.1.1.p0
+1.2.p0
diff --git a/build/pkgs/sympy/patches/prec-to-precision-in-core-numbers.patch b/build/pkgs/sympy/patches/prec-to-precision-in-core-numbers.patch
deleted file mode 100644
index df66661..00000000
--- a/build/pkgs/sympy/patches/prec-to-precision-in-core-numbers.patch
+++ /dev/null
@@ -1,24 +0,0 @@
-diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
-index 864d05508..f296ec73d 100644
---- a/sympy/core/numbers.py
-+++ b/sympy/core/numbers.py
-@@ -947,6 +947,7 @@ def __new__(cls, num, dps=None, prec=None, precision=None):
-                             issue=12820,
-                             deprecated_since_version="1.1").warn()
-             dps = prec
-+        del prec  # avoid using this deprecated kwarg
- 
-         if dps is not None and precision is not None:
-             raise ValueError('Both decimal and binary precision supplied. '
-@@ -1052,7 +1053,7 @@ def __new__(cls, num, dps=None, prec=None, precision=None):
-             if precision < num._prec:
-                 _mpf_ = mpf_norm(_mpf_, precision)
-         else:
--            _mpf_ = mpmath.mpf(num, prec=prec)._mpf_
-+            _mpf_ = mpmath.mpf(num, prec=precision)._mpf_
- 
-         # special cases
-         if _mpf_ == _mpf_zero:
--- 
-2.15.1
-
diff --git a/src/sage/functions/gamma.py b/src/sage/functions/gamma.py
index de4cd27..2701c9c 100644
--- a/src/sage/functions/gamma.py
+++ b/src/sage/functions/gamma.py
@@ -516,9 +516,9 @@ class Function_gamma_inc_lower(BuiltinFunction):
             sage: gamma_inc_lower(2,377/79)
             -456/79*e^(-377/79) + 1
             sage: gamma_inc_lower(3,x)
-            -x^2*e^(-x) - 2*x*e^(-x) - 2*e^(-x) + 2
+            -(x^2 + 2*x + 2)*e^(-x) + 2
             sage: gamma_inc_lower(9/2,37/7)
-            105/16*sqrt(pi)*erf(1/7*sqrt(259)) - 836473/19208*sqrt(259)*e^(-37/7)
+            -1/38416*sqrt(pi)*(1672946*sqrt(259)*e^(-37/7)/sqrt(pi) - 252105*erf(1/7*sqrt(259)))
         """
         if y == 0:
             return 0
diff --git a/src/sage/interfaces/sympy.py b/src/sage/interfaces/sympy.py
index 1288ca6..a6f2823 100644
--- a/src/sage/interfaces/sympy.py
+++ b/src/sage/interfaces/sympy.py
@@ -324,8 +324,9 @@ def _sympysage_derivative(self):
         sage: assert diff(f(x),x) == sympy_diff._sage_()
     """
     from sage.calculus.functional import derivative
-    args = [arg._sage_() for arg in self.args]
-    return derivative(*args)
+    f = self.args[0]._sage_()
+    args = [[a._sage_() for a in arg] if isinstance(arg,tuple) else arg._sage_() for arg in self.args[2:]]
+    return derivative(f, *args)
 
 def _sympysage_order(self):
     """
@@ -504,7 +505,7 @@ def _sympysage_piecewise(self):
 
         sage: _ = var('y, z')
         sage: (x^y - z).integrate(y, algorithm="sympy")
-        -y*z + cases(((log(x) == 0, y), (1, x^y/log(x))))
+        -y*z + cases(((log(x) != 0, x^y/log(x)), (1, y)))
     """
     from sage.functions.other import cases
     return cases([(p.cond._sage_(),p.expr._sage_()) for p in self.args])
diff --git a/src/sage/symbolic/expression_conversions.py b/src/sage/symbolic/expression_conversions.py
index dd8986f..7eed50a 100644
--- a/src/sage/symbolic/expression_conversions.py
+++ b/src/sage/symbolic/expression_conversions.py
@@ -815,7 +815,7 @@ class SympyConverter(Converter):
             sage: df_sage = f_sage.diff(x, 2, y, 1); df_sage
             diff(f_sage(x, y), x, x, y)
             sage: df_sympy = df_sage._sympy_(); df_sympy
-            Derivative(f_sage(x, y), x, x, y)
+            Derivative(f_sage(x, y), (x, 2), y)
             sage: df_sympy == f_sympy.diff(x, 2, y, 1)
             True
         """
diff --git a/src/sage/symbolic/integration/integral.py b/src/sage/symbolic/integration/integral.py
index 9818af4..86357a0 100644
--- a/src/sage/symbolic/integration/integral.py
+++ b/src/sage/symbolic/integration/integral.py
@@ -521,7 +521,7 @@ def integrate(expression, v=None, a=None, b=None, algorithm=None, hold=False):
         sage: (x^y - z).integrate(y)
         -y*z + x^y/log(x)
         sage: (x^y - z).integrate(y, algorithm="sympy")
-        -y*z + cases(((log(x) == 0, y), (1, x^y/log(x))))
+        -y*z + cases(((log(x) != 0, x^y/log(x)), (1, y)))
 
     We integrate the above function in Maple now::
 
diff --git a/src/sage/symbolic/relation.py b/src/sage/symbolic/relation.py
index 89ff688..8926279 100644
--- a/src/sage/symbolic/relation.py
+++ b/src/sage/symbolic/relation.py
@@ -914,13 +914,13 @@ def solve(f, *args, **kwds):
     print them::
 
         sage: solve(sinh(x) - 2*cosh(x),x,algorithm='sympy')
-        ConditionSet(x, Eq((-exp(2*x) - 3)*exp(-x)/2, 0), S.Reals)
+        ConditionSet(x, Eq((-exp(2*x) - 3)*exp(-x)/2, 0), Reals)
         sage: solve(2*sin(x) - 2*sin(2*x), x,algorithm='sympy')
         ...
-        [ImageSet(Lambda(_n, 2*_n*pi), S.Integers),
-         ImageSet(Lambda(_n, 2*_n*pi + pi), S.Integers),
-         ImageSet(Lambda(_n, 2*_n*pi + 5*pi/3), S.Integers),
-         ImageSet(Lambda(_n, 2*_n*pi + pi/3), S.Integers)]
+        [ImageSet(Lambda(_n, 2*_n*pi), Integers),
+         ImageSet(Lambda(_n, 2*_n*pi + pi), Integers),
+         ImageSet(Lambda(_n, 2*_n*pi + 5*pi/3), Integers),
+         ImageSet(Lambda(_n, 2*_n*pi + pi/3), Integers)]
 
         sage: solve(x^5 + 3*x^3 + 7, x, algorithm='sympy')[0] # known bug
         complex_root_of(x^5 + 3*x^3 + 7, 0)
